[JOB - ABERTURA ALERTA NO ALERT MANAGER]
search = index=eventosnotaveis earliest=-15m@m latest=@m Origem="*" orig_host=*\
| rename orig_host as host orig_index as index \
| eval templateName = "Template FORTINET" \
| table _time host metric index value templateName\
| dedup _time host metric index value templateName\
\
| lookup Equipamentos Solucao as host output Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| where isnotnull(Solucao)\
| join max=0 type=inner templateName metric \
    [| inputlookup TemplateAlarme \
    | eval metric = thresholdMetric]\
    | eval thresholdIndex = if(thresholdIndex = "*", index, thresholdIndex)\
    | where thresholdIndex = index\
    | eval Trigger=case(thresholdType="=" AND value=thresholdValue, "TRUE", thresholdType=">" AND value>thresholdValue, "TRUE", thresholdType=">=" AND value>=thresholdValue, "TRUE", thresholdType="<" AND value<thresholdValue, "TRUE", thresholdType="<=" AND value<=thresholdValue, "TRUE",thresholdType="!=" AND value!=thresholdValue, "TRUE",thresholdType="<>" AND value!=thresholdValue, "TRUE", 1=1, "FALSE") \
| eval duration = tonumber(trim(thresholdDuration)) + 1 \
| eval data_duration = relative_time(now(), "-" + duration + "m@m")\
| fillnull value=""\
| dedup metric index host value _time Trigger data_duration duration templateName thresholdDuration thresholdMessage thresholdSeverityCode thresholdType thresholdValue Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| stats count(eval(_time >=data_duration)) as Total \
        count(eval(Trigger="TRUE" AND _time >= data_duration )) as TotalAlarmado \
        earliest(eval(if(value != thresholdValue, value, null()))) as value \
        earliest(_time) as _time \
        earliest(thresholdDuration) as duration \
        by host metric index templateName thresholdSeverityCode thresholdType thresholdValue thresholdMessage Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| where (TotalAlarmado = Total AND Total !=0) \
| fillnull value="" \
| sort 0 - thresholdSeverityCode \
| stats first(_time) as _time first(value) as value first(templateName) as templateName first(thresholdSeverityCode) as thresholdSeverityCode first(thresholdType) as thresholdType first(thresholdValue) as thresholdValue first(thresholdMessage) as thresholdMessage first(duration) as duration by host metric index Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| eval impact = case(thresholdSeverityCode = 4, "performance" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval priority = case(thresholdSeverityCode = 4, "informational" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval urgency = case(thresholdSeverityCode = 4, "low" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval severity = impact\
| eval message = thresholdMessage\
| eval thresholdIndex = index\
| `FormatarMensagemAlertManager(message)`\
| eval message = message, dataAbertura = _time\
| rename Location as Localidade, Description as host\
| fields _time dataAbertura host metric index value templateName thresholdSeverityCode thresholdType thresholdValue message metric severity impact urgency duration Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Localidade PrimeId\
| where isnotnull(Solucao)\
| eval host = if(host == "", Solucao, host)

[JOB - ABERTURA ALERTA NO ALERT MANAGER INTERFACES - FORTINET]
search = index=eventosnotaveis Origem="FORTINET SYSTEM INTERFACE BANDWIDTH" earliest=-1h@m latest=@m metric = "link"\
| rename orig_host as host\
| stats latest(value) as value latest(_time) as _time by host metric orig_index \
| lookup bdi_siebel.csv SOLUCAO_ID as host INTERFACE as orig_index output FUNCAO_INTERFACE\
| where isnotnull(FUNCAO_INTERFACE) \
| eval aux = orig_index . "|" . FUNCAO_INTERFACE . "|" . value \
| stats values(orig_index) as orig_index values(aux) as aux list(eval(value="True")) as qtdeLinksUP latest(_time) as _time by host \
| fillnull qtdeLinks value=0\
| eval qtdeLinks = mvcount(aux)\
| where qtdeLinksUP < qtdeLinks\
| mvexpand aux \
| eval link = mvindex(split(aux, "|"),0), funcao = mvindex(split(aux, "|"),1), status = mvindex(split(aux, "|"),2)\
| where status != "True"\
| eval texto = case(qtdeLinks = 1, "Equipamento com apenas 1 link com status down na interface " . link, qtdeLinks > 1, "Link " . funcao . " com status down na interface " . link,   true(), "NAO IMPLEMENTADO")\
| lookup Equipamentos Solucao as host output Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| eval thresholdSeverityCode = case(qtdeLinks = 1, 3, qtdeLinks > 1,  2,   true(), 2)\
| eval metric = "link", index=link, value = "down", templateName = "Template FORTINET INTERFACES",  thresholdType = "=", thresholdValue = "False", message = texto, host = Description\
| eval impact = case(thresholdSeverityCode = 4, "performance" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval priority = case(thresholdSeverityCode = 4, "informational" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval urgency = case(thresholdSeverityCode = 4, "low" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval severity = impact, dataAbertura = _time\
| table _time dataAbertura host metric index value templateName thresholdSeverityCode thresholdType thresholdValue message metric severity impact urgency duration Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Localidade PrimeId\
| where host != ""

[JOB - CLEAR ALERTA NO ALERT MANAGER]
search = index=eventosnotaveis earliest=-8m@m latest=@m \
| rename orig_host as host orig_index as index \
| eval Solucao = host \
| eval templateName = "Template FORTINET" \
| table _time host metric index value templateName Solucao \
| stats latest(value) as value latest(_time) as _time by templateName host metric index Solucao \
| join max=0 type=inner templateName metric \
    [| inputlookup TemplateAlarme \
    | eval metric = thresholdMetric] \
| eval thresholdIndex = if(thresholdIndex = "*", index, thresholdIndex) \
| where thresholdIndex = index \
| eval Trigger=case(thresholdType="=" AND value=thresholdValue, "TRUE", thresholdType=">" AND value>thresholdValue, "TRUE", thresholdType=">=" AND value>=thresholdValue, "TRUE", thresholdType="<" AND value<thresholdValue, "TRUE", thresholdType="<=" AND value<=thresholdValue, "TRUE",thresholdType="!=" AND value!=thresholdValue, "TRUE",thresholdType="<>" AND value!=thresholdValue, "TRUE", 1=1, "FALSE") \
| where Trigger = "FALSE" \
| fillnull value="" \
| join type=inner Solucao metric index \
    [| inputlookup incidents where (status = "new" OR status="assigned") AND Solucao!= "N/A" AND metric != "N/A" AND alert!="OPEN - GENERAL - V2"\
    | eval chave = _key \
    | table incident_id host metric index value title status chave Solucao]\
| lookup incidents incident_id\
| eval status = "closed", _key = chave, alert_close_time = _time\
| outputlookup incidents append=true

[JOB - FORTINET HEALTH CHECK - NORMALIZE]
search = index=snmp_v2 sourcetype=health-check_json status!=error status!=down solutionId!= "" earliest=-5m@m latest=@m\
| where isnull('erro no equipamento') \
| eventstats max(_time) as ultimo by solutionId \
| where _time =ultimo \
| table _time ultimo solutionId IPSLA jitter latency packet_loss packet_loss_percent packet_received packet_sent port tx* rx* \
| eval metricas = "" \
| eval packet_loss_percent = round(packet_loss * 100 / packet_sent)\
| foreach jitter latency packet_loss packet_received packet_loss_percent packet_sent port tx* rx* \
    [ eval metricas = metricas + "<<FIELD>>=" + <<FIELD>> + "##"] \
| eval metricas = trim(split(metricas, "##")) \
| eval metricas=trim(metricas) \
| mvexpand metricas \
| where isnotnull(metricas) AND metricas != "" \
| strcat IPSLA + " - " + port + "=" + metricas metricas \
| eval metricas = split(metricas, "="), index=mvindex(metricas, 0), metric = mvindex(metricas, 1), value=mvindex(metricas,2) \
| rename solutionId as host\
| table _time host metric index value\
| `CollectEventosNotaveis("FORTINET HEALTH CHECK IPSLA")`

[JOB - FORTINET RESOURCE USAGE - NORMALIZE]
search = index=snmp_v2 sourcetype=resourceUsage_json earliest=-5m@m latest=@m\
| rename solutionId as host\
| table _time host results.*.current\
| rename results.*{}.current as metric_*\
| eval metricas = ""\
| foreach metric_* [| eval metricas = metricas +"<<FIELD>>=" + <<FIELD>> + "##"]\
| eval metricas = split(metricas, "##")\
| mvexpand metricas\
|fields _time host metricas\
| where isnotnull(metricas) AND metricas != ""\
| eval metricas = split(metricas, "="), index="", metric = replace(mvindex(metricas, 0), "metric_", ""), value=mvindex(metricas,1)\
| table _time host metric index value\
| `CollectEventosNotaveis("FORTINET RESOURCE USAGE")`

[JOB - FORTINET SYSTEM INTERFACE - NORMALIZE]
search = index=snmp_v2 sourcetype=systemInterface_json earliest=-12m@m latest=@m NOT("erro no equipamento") solutionId != ""\
| dedup _time solutionId id\
| table _time solutionId alias duplex id ip link mac name rx* speed tx*\
| stats  min(rx_bytes) as min_rx_bytes max(rx_bytes) as max_rx_bytes \
         min(tx_bytes) as min_tx_bytes max(tx_bytes) as max_tx_bytes\
         min(tx_packets) as min_tx_packets max(tx_packets) as max_tx_packets\
         min(rx_packets) as min_rx_packets max(rx_packets) as max_rx_packets\
         min(tx_errors) as min_tx_errors max(tx_errors) as max_tx_errors\
         latest(_time) as _time\
         latest(alias) as alias\
         latest(duplex) as duplex\
         latest(ip) as ip\
         latest(link) as link\
         latest(mac) as mac\
         latest(speed) as speed\
by solutionId id name\
| eval rx_bytes=round(max_rx_bytes-min_rx_bytes),\
       tx_bytes=round(max_tx_bytes-min_tx_bytes),\
       rx_packets=round(max_rx_packets-min_rx_packets),\
       tx_packets=round(max_tx_packets-min_tx_packets),\
       tx_errors=round(max_tx_errors-min_tx_errors),\
       bandwidth_bytes_1m = round(tx_bytes + rx_bytes / 5),\
       bandwidth_mb_1m =  round((bandwidth_bytes_1m / 1024 / 1024)),\
       bandwidth_perc_1m = round((bandwidth_bytes_1m / 1024 / 1024) / speed * 100)\
       \
| eval metricas = ""\
| foreach rx* tx* name link alias ip mac speed bandwidth_* [| eval metricas = metricas + id +"=<<FIELD>>=" + <<FIELD>> + "##"]\
| eval metricas = split(metricas, "##")\
| mvexpand metricas\
| fields - id alias name ip mac mask speed rx* tx*\
| where isnotnull(metricas) AND metricas != ""\
| eval metricas = split(metricas, "="), index=mvindex(metricas, 0), metric = mvindex(metricas, 1), value=mvindex(metricas,2)\
| rename solutionId as host\
| table _time host metric index value\
| `CollectEventosNotaveis("FORTINET SYSTEM INTERFACE BANDWIDTH")`

[CLOSE - GENERAL - V2]
search = index=eventosnotaveis_v2 source="NORMALIZE - VELOCLOUD - V2" earliest=-25m@m latest=@m\
\
| sort 0 metric edgeId linkId interface - _time\
| streamstats count by metric edgeId linkId interface\
| where count <=3\
\
| lookup templateAlarme_v2.csv metric OUTPUT threshold operator\
| eval anomaly = case(operator="=" AND value=threshold, "TRUE", \
                      operator=">" AND value>threshold, "TRUE", \
                      operator=">=" AND value>=threshold, "TRUE", \
                      operator="<" AND value<threshold, "TRUE", \
                      operator="<=" AND value<=threshold, "TRUE",\
                      operator="!=" AND value!=threshold, "TRUE",\
                      operator="<>" AND value!=threshold, "TRUE", \
                      true(), "FALSE")\
\
| stats latest(_time) as alert_close\
        latest(eval(if(anomaly="TRUE", count, null()))) as last_alert_event\
        count(eval(anomaly="TRUE")) as triggers\
        count as events\
        by metric edgeId linkId interface\
| where events=3 AND (triggers = 0 OR last_alert_event > 2)        \
\
| join metric edgeId linkId interface [\
    | inputlookup incidents where status IN ("new", "assigned") AND alert="OPEN - GENERAL - V3"\
    | spath input=extras\
    | rename _key as key\
]\
\
| fields - last_alert_event edgeId interface linkId triggers\
\
| eval status = "closed"\
| rename alert_close as alert_close_time\
\
| outputlookup append=true key_field=key incidents

[JOB - ABERTURA ALERTA NO ALERT MANAGER INTERFACES - MPLS]
search = index=snmp_if mib=IF-MIB oid!="ifStackStatus*" oid!="ifStackLastChange*" oid!="ifTableLastChange*" earliest=-6m@m latest=@m \
| table _time host oid snmp_index value \
| eval {oid} = value, Description = host\
| fields - oid value \
| bin span=5m _time \
| stats values(*) as * by _time host Description snmp_index  \
| where isnotnull(ifAdminStatus) AND isnotnull(ifOperStatus) \
| dedup host snmp_index \
| table _time host Description snmp_index ifAlias ifName ifDescr ifType ifSpeed ifAdminStatus ifOperStatus FUNCAO_INTERFACE \
| eval ifDescr = replace(ifDescr, ":", ".")\
| lookup bdi_siebel host INTERFACE as ifDescr output FUNCAO_INTERFACE SOLUCAO_ID\
| where isnotnull(FUNCAO_INTERFACE) AND (FUNCAO_INTERFACE = "Titular" OR FUNCAO_INTERFACE = "Backup")\
| eval value = if(ifOperStatus = "'up'", "True", "False")\
| eval aux = ifDescr . "|" . FUNCAO_INTERFACE . "|" . value\
| eval host = SOLUCAO_ID\
| stats values(orig_index) as orig_index values(aux) as aux dc(aux) as qtdeLinks count(eval(value = "True")) as qtdeLinksUP latest(_time) as _time by host Description\
| fillnull qtdeLinksUP value=0\
| mvexpand aux\
| eval link = mvindex(split(aux, "|"),0), funcao = mvindex(split(aux, "|"),1), status = mvindex(split(aux, "|"),2)\
| where status != "True"\
| eval texto = case(qtdeLinks = 1, "Equipamento com apenas 1 link com status down na interface " . link, qtdeLinks > 1, "Link " . funcao . " com status down na interface " . link,   true(), "NAO IMPLEMENTADO")\
| lookup siebel SOLUCAO AS host  output ESTADO CIDADE CLIENTE_ID CLIENTE TIPO_NEGOCIO TIPO_SERVICO SERVICO SOLUCAO PRIME_ID\
| eval thresholdSeverityCode = case(qtdeLinks = 1, 3, qtdeLinks > 1,  2,   true(), 2)\
| eval metric = "link", index=link, value = "down", templateName = "Template FORTINET INTERFACES",  thresholdType = "=", thresholdValue = "False", message = texto, host = Description\
| eval impact = case(thresholdSeverityCode = 4, "performance" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval priority = case(thresholdSeverityCode = 4, "informational" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval urgency = case(thresholdSeverityCode = 4, "low" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval severity = impact, dataAbertura = _time\
| rename ESTADO as Estado CIDADE as Cidade CLIENTE_ID as ClienteId CLIENTE as Cliente TIPO_NEGOCIO as TipoNegocio TIPO_SERVICO as TipoServico SERVICO as Servico SOLUCAO AS Solucao PRIME_ID as PrimeId\
| table _time dataAbertura host metric index value templateName thresholdSeverityCode thresholdType thresholdValue message metric severity impact urgency duration Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Localidade PrimeId

[JOB - ABERTURA ALERTA NO ALERT MANAGER_BACKUP]
action.alert_manager = 1
action.alert_manager.param.append_incident = 1
action.alert_manager.param.auto_previous_resolve = 0
action.alert_manager.param.auto_subsequent_resolve = 0
action.alert_manager.param.auto_suppress_resolve = 0
action.alert_manager.param.auto_ttl_resove = 0
action.alert_manager.param.impact = high
action.alert_manager.param.title = $result.host$ - $result.message$
action.alert_manager.param.urgency = high
action.email.show_password = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 3,8,13,18,23,28,33,38,43,48,53,58 * * * *
disabled = 1
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = index=eventosnotaveis earliest=-15m@m latest=@m Origem="*" orig_host=*\
| rename orig_host as host orig_index as index \
| eval templateName = "Template FORTINET" \
| table _time host metric index value templateName\
| dedup _time host metric index value templateName\
\
| lookup Equipamentos Solucao as host output Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| where isnotnull(Solucao)\
| join max=0 type=inner templateName metric \
    [| inputlookup TemplateAlarme \
    | eval metric = thresholdMetric]\
    | eval thresholdIndex = if(thresholdIndex = "*", index, thresholdIndex)\
    | where thresholdIndex = index\
    | eval Trigger=case(thresholdType="=" AND value=thresholdValue, "TRUE", thresholdType=">" AND value>thresholdValue, "TRUE", thresholdType=">=" AND value>=thresholdValue, "TRUE", thresholdType="<" AND value<thresholdValue, "TRUE", thresholdType="<=" AND value<=thresholdValue, "TRUE",thresholdType="!=" AND value!=thresholdValue, "TRUE",thresholdType="<>" AND value!=thresholdValue, "TRUE", 1=1, "FALSE") \
| eval duration = tonumber(trim(thresholdDuration)) + 1 \
| eval data_duration = relative_time(now(), "-" + duration + "m@m")\
| fillnull value=""\
| dedup metric index host value _time Trigger data_duration duration templateName thresholdDuration thresholdMessage thresholdSeverityCode thresholdType thresholdValue Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| stats count(eval(_time >=data_duration)) as Total count(eval(Trigger="TRUE" AND _time >= data_duration )) as TotalAlarmado earliest(value) as value earliest(_time) as _time earliest(thresholdDuration) as duration by host metric index templateName thresholdSeverityCode thresholdType thresholdValue thresholdMessage Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| where (TotalAlarmado = Total AND Total !=0) \
| fillnull value="" \
| sort 0 - thresholdSeverityCode \
| stats first(_time) as _time first(value) as value first(templateName) as templateName first(thresholdSeverityCode) as thresholdSeverityCode first(thresholdType) as thresholdType first(thresholdValue) as thresholdValue first(thresholdMessage) as thresholdMessage first(duration) as duration by host metric index Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description\
| eval impact = case(thresholdSeverityCode = 4, "performance" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval priority = case(thresholdSeverityCode = 4, "informational" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval urgency = case(thresholdSeverityCode = 4, "low" , thresholdSeverityCode = 3, "high" , thresholdSeverityCode = 2, "medium", thresholdSeverityCode = 1, "low", true(), "N/A")\
| eval severity = impact\
| eval message = thresholdMessage\
| eval thresholdIndex = index\
| `FormatarMensagemAlertManager(message)`\
| eval message = message, dataAbertura = _time\
| rename Location as Localidade, Description as host\
| fields _time dataAbertura host metric index value templateName thresholdSeverityCode thresholdType thresholdValue message metric severity impact urgency duration Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Localidade PrimeId\
| where isnotnull(Solucao)\
| eval host = if(host == "", Solucao, host)

[JOB - CLEAR ALERTA NO ALERT MANAGER MPLS INTERFACES]
disabled = 0
search = index=snmp_if mib=IF-MIB oid!="ifStackStatus*" oid!="ifStackLastChange*" oid!="ifTableLastChange*" earliest=-6m@m latest=@m \
| table _time host oid snmp_index value \
| eval {oid} = value, Description = host\
| fields - oid value \
| bin span=5m _time \
| stats values(*) as * by _time host Description snmp_index  \
| search NOT (ifDescr = "Serial*" OR ifDescr = "Voice*" OR ifDescr = "E1*" OR ifDescr ="EFXS*" OR ifDescr = "Embedded-Service*" OR ifDescr = "Vlan*") \
| where isnotnull(ifAdminStatus) AND isnotnull(ifOperStatus) \
| dedup host snmp_index \
| table _time host Description snmp_index ifAlias ifName ifDescr ifType ifSpeed ifAdminStatus ifOperStatus FUNCAO_INTERFACE \
| eval ifDescr = replace(ifDescr, ":", ".")\
| lookup bdi_siebel host INTERFACE as ifDescr output FUNCAO_INTERFACE SOLUCAO_ID\
| where isnotnull(FUNCAO_INTERFACE) AND (FUNCAO_INTERFACE = "Titular" OR FUNCAO_INTERFACE = "Backup")\
| eval value = if(ifOperStatus = "'up'", "True", "False")\
| eval aux = ifDescr . "|" . FUNCAO_INTERFACE . "|" . value\
| eval host = SOLUCAO_ID\
| stats values(orig_index) as orig_index values(aux) as aux dc(aux) as qtdeLinks count(eval(value = "True")) as qtdeLinksUP latest(_time) as _time by host Description\
| fillnull qtdeLinksUP value=0\
| mvexpand aux\
| eval link = mvindex(split(aux, "|"),0), funcao = mvindex(split(aux, "|"),1), status = mvindex(split(aux, "|"),2)\
| where status = "True"\
| eval texto = case(qtdeLinks = 1, "Equipamento com apenas 1 link com status down na interface " . link, qtdeLinks > 1, "Link " . funcao . " com status down na interface " . link,   true(), "NAO IMPLEMENTADO")\
| lookup siebel SOLUCAO AS host  output ESTADO CIDADE CLIENTE_ID CLIENTE TIPO_NEGOCIO TIPO_SERVICO SERVICO SOLUCAO PRIME_ID\
| eval thresholdSeverityCode = case(qtdeLinks = 1, 3, qtdeLinks > 1,  2,   true(), 2)\
| eval metric = "link", index=link, templateName = "Template FORTINET INTERFACES",  host = Description\
| table host metric index\
| join type=inner host metric index [| inputlookup incidents \
| where (status = "new" OR status="assigned") AND host!= "N/A" AND metric != "N/A"| eval chave = _key | table incident_id host metric index value title status chave]\
| lookup incidents incident_id\
| eval status = "closed", _key = chave, alert_close_time = _time\
| outputlookup incidents append=true

[JOB - MPLS INTERFACES - NORMALIZE]
search = index=snmp_if mib=IF-MIB oid!="ifStackStatus*" oid!="ifStackLastChange*"  oid!="ifTableLastChange*" earliest=-20m@m latest=@m\
| table _time host oid snmp_index value \
| eval {oid} = value \
| fields - oid value \
| bin span=5m _time \
| stats values(*) as * by _time host snmp_index \
| where isnotnull(ifAdminStatus) AND ifAdminStatus = "'up'" \
| sort 0 host snmp_index _time\
| where  (isnotnull(ifHighSpeed) AND isnotnull(ifHCInOctets) AND isnotnull(ifHCOutOctets)) OR (isnotnull(ifSpeed) AND isnotnull(ifInOctets) AND isnotnull(ifOutOctets))\
| bandwidth\
| lookup bdi_siebel.csv host INTERFACE as ifDescr output SOLUCAO_ID FUNCAO_INTERFACE \
| where isnotnull(SOLUCAO_ID)\
| eval description = host, host = SOLUCAO_ID, BandwidthInUsagePerc=round(BandwidthInUsagePerc,3), BandwidthOutUsagePerc=round(BandwidthOutUsagePerc,3)\
| sort 0 - host snmp_index _time\
| eval IN_BPS = ifnull(HC_IN_BPS, IN_BPS), OUT_BPS = ifnull(HC_OUT_BPS, OUT_BPS), IN_KBPS = IN_BPS / 1000, OUT_KBPS=IN_BPS/1000, IN_MBPS = IN_BPS/1000/1000, OUT_MBPS = OUT_BPS /1000/1000\
| fields - HC_IN_BPS HC_OUT_BPS HC_IN_PERC HC_OUT_PERC\
| dedup host snmp_index\
| eval metric = ""\
| foreach * [eval metric=metric + "|||<<FIELD>>=" + ifnull(<<FIELD>>, "")]\
| fields host snmp_index _time metric ifDescr FUNCAO_INTERFACE description\
| eval metric = split(metric, "|||")\
| mvexpand metric\
| eval value = mvindex(split(metric, "="), -1), metric=mvindex(split(metric, "="), 0)\
| where ( metric IN("BandwidthInUsagePerc", "BandwidthOutUsagePerc", "OUT_ERRORS", "IN_ERRORS", "OUT_DISCARDS", "IN_DISCARDS", "ifOperStatus"))\
| rename ifDescr as index\
| dedup host metric index\
| fields _time host metric index value origem FUNCAO_INTERFACE description\
| where value!=""\
| `CollectEventosNotaveis("MPLS INTERFACES")`

[JOB - VELOCLOUD - INTERFACE STATS - NORMALIZE]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 1,6,11,16,21,26,31,36,41,46,51,56 * * * *
disabled = 1
dispatch.earliest_time = -5m@m
dispatch.latest_time = @m
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = index=gerencia description!="None" earliest=-5m@m latest=@m\
| eval description = split(description, " | "), description = if(mvcount(description) > 1, mvindex(description, 1), description)\
| table _time description linkId enterpriseId enterpriseName interface displayName isp linkIpAddress bytes* best* totalBytes\
| where bytesRx != "None"\
| eval jitter = bestJitterMsRx + bestJitterMsTx, latency = bestLatencyMsRx + bestLatencyMsTx, packet_loss_percent = bestLossPctRx + bestLossPctTx\
| rename description as host, linkId as index\
| eval metricas = "" \
\
| foreach jitter latency packet_loss_percent \
    [ eval metricas = metricas + "<<FIELD>>=" + <<FIELD>> + "##"]\
    | eval metricas = trim(split(metricas, "##")) \
| eval metricas=trim(metricas) \
| mvexpand metricas\
| eval metric = mvindex(split(metricas, "="),0),  value = mvindex(split(metricas, "="),1)\
| where isnotnull(metric)\
| table _time host metric index value\
| `CollectEventosNotaveis("VELOCLOUD HEALTH CHECK IPSLA")`

[JOB - VELOCLOUD - LINK STATUS - NORMALIZE]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 1,6,11,16,21,26,31,36,41,46,51,56 * * * *
disabled = 1
dispatch.earliest_time = -5m@m
dispatch.latest_time = @m
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = index=velocloud linkState=* earliest=-5m@m latest=@m \
| stats latest(linkState) as value, latest(_time) as _time by edgeSerialNumber, interface \
| eval description = "" \
| join type=left edgeSerialNumber \
    [ search index=velocloud description="2*" earliest=-10m@m latest=@m \
    | stats latest(description) as description by serialNumber \
    | rename serialNumber as edgeSerialNumber] \
| where description!= "" AND value != "null"\
| rename interface as index, description as host \
| eval metric = "linkState" \
| table _time host metric index value\
| `CollectEventosNotaveis("VELOCLOUD LINK STATUS")`

[JOB - VELOCLOUD - STATUS - NORMALIZE]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 1,6,11,16,21,26,31,36,41,46,51,56 * * * *
disabled = 1
dispatch.earliest_time = -5m@m
dispatch.latest_time = @m
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = search
request.ui_dispatch_view = search
search = index=velocloud edgeState=* description != "null" description="2*" earliest=-5m@m latest=@m\
| stats latest(edgeState) as value, latest(_time) as _time by name, id, clientname, description\
| eval metric = "status"\
\
| rename description as host, id as index\
| table _time host metric index value\
| `CollectEventosNotaveis("VELOCLOUD STATUS")`

[NORMALIZE - VELOCLOUD - V2]
action.email.show_password = 1
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = eventosnotaveis_v2
alert.track = 0
cron_schedule = 2-59/5 * * * *
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = alert_manager
request.ui_dispatch_view = search
search = index=velocloud_v2 earliest=-5m@m latest=@m \
\
| stats latest(linkState) as linkState\
        latest(linkVpnState) as linkVpnState\
        latest(bestJitterMsRx) as bestJitterMsRx\
        latest(bestJitterMsTx) as bestJitterMsTx\
        latest(bestLatencyMsRx) as bestLatencyMsRx\
        latest(bestLatencyMsTx) as bestLatencyMsTx\
        latest(bestLossPctRx) as bestLossPctRx\
        latest(bestLossPctTx) as bestLossPctTx\
        latest(edgeState) as status\
        latest(_time) as time \
        latest(enterpriseId) as enterpriseId\
        by edgeId linkId interface description\
        \
| lookup alertingFilter.csv id as enterpriseId OUTPUT name\
| where isnotnull(name)\
        \
| eval jitter = bestJitterMsRx + bestJitterMsTx, \
       latency = bestLatencyMsRx + bestLatencyMsTx, \
       packet_loss_percent = bestLossPctRx + bestLossPctTx,\
       info = time."{###}".edgeId."{###}".description."{###}".linkId."{###}".interface."{###}".enterpriseId."{###}".name\
       \
| fields info jitter latency packet_loss_percent status linkState linkVpnState\
| untable info metric value\
\
| eval info = split(info, "{###}"),\
       _time = mvindex(info, 0),\
       edgeId = mvindex(info, 1),\
       description = mvindex(info, 2),\
       linkId = mvindex(info, 3),\
       interface = mvindex(info, 4),\
       enterpriseId = mvindex(info, 5),\
       name = mvindex(info, 6),\
       host = mvindex(info, 2),\
       index = case(metric == "linkState" OR metric == "linkVpnState", mvindex(info, 4),\
                    metric == "status", mvindex(info, 1),\
                    true(), mvindex(info, 3))\
\
| table _time host index edgeId description linkId interface enterpriseId name metric value

[OPEN - GENERAL - V2]
action.alert_manager = 1
action.alert_manager.param.append_incident = 1
action.alert_manager.param.auto_previous_resolve = 0
action.alert_manager.param.auto_subsequent_resolve = 0
action.alert_manager.param.auto_suppress_resolve = 0
action.alert_manager.param.auto_ttl_resove = 0
action.alert_manager.param.impact = high
action.alert_manager.param.title = $result.host$ - $result.message$
action.alert_manager.param.urgency = high
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 3-59/5 * * * *
disabled = 1
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = alert_manager
request.ui_dispatch_view = search
search = index=eventosnotaveis_v2 source="NORMALIZE - VELOCLOUD - V2" earliest=-25m@m latest=@m\
\
| sort 0 metric edgeId linkId interface - _time\
| streamstats count by metric edgeId linkId interface\
| where count <=3\
\
| lookup templateAlarme_v2.csv metric OUTPUT occurences threshold operator severity message\
| eval anomaly = case(operator="=" AND value=threshold, "TRUE", \
                      operator=">" AND value>threshold, "TRUE", \
                      operator=">=" AND value>=threshold, "TRUE", \
                      operator="<" AND value<threshold, "TRUE", \
                      operator="<=" AND value<=threshold, "TRUE",\
                      operator="!=" AND value!=threshold, "TRUE",\
                      operator="<>" AND value!=threshold, "TRUE", \
                      true(), "FALSE")\
                      \
| stats count(eval(anomaly="TRUE")) as triggers\
        earliest(eval(if(anomaly="TRUE", _time, null()))) as alert_time\
        latest(eval(if(anomaly="TRUE", count, null()))) as last_alert_event\
        earliest(eval(if(anomaly="TRUE", value, null()))) as value\
        values(occurences) as occurences\
        latest(description) as solucao\
        values(message) as message\
        values(threshold) as threshold\
        values(severity) as severity\
        values(orig_index) as index\
        by metric edgeId linkId interface\
\
| where isnotnull(alert_time) AND triggers>=occurences AND last_alert_event <=2 \
\
| eval message=replace(message,"<interface>", interface), \
       message=replace(message,"<threshold>", threshold), \
       message=replace(message,"<edge>", edgeId),\
       message=replace(message,"<value>", value)\
| lookup severityMapping.csv id as severity OUTPUT\
       \
| fields metric alert_time edgeId linkId solucao message impact priority urgency interface update severity index\
| stats values(*) as * by metric edgeId linkId interface solucao\
\
| eval update = now(),\
       host = solucao,\
       extras = "{"\
\
| foreach edgeId,linkId,interface,update [\
    | eval extras = extras."\"<<FIELD>>\": \"".'<<FIELD>>'."\", "\
]\
| rex mode=sed field=extras "s/, $/}/g"\
| fields - edgeId,linkId,interface,update\
\
| rename solucao as Solucao severity as thresholdSeverityCode\
| lookup Equipamentos Solucao output Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description

[OPEN - GENERAL - V3]
action.alert_manager = 1
action.alert_manager.param.append_incident = 1
action.alert_manager.param.auto_previous_resolve = 0
action.alert_manager.param.auto_subsequent_resolve = 0
action.alert_manager.param.auto_suppress_resolve = 0
action.alert_manager.param.auto_ttl_resove = 0
action.alert_manager.param.impact = high
action.alert_manager.param.title = $result.host$ - $result.message$
action.alert_manager.param.urgency = high
alert.digest_mode = 0
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = 3-59/5 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = index=eventosnotaveis_v2 source="NORMALIZE - VELOCLOUD - V2" earliest=-25m@m latest=@m\
\
| sort 0 metric edgeId linkId interface - _time\
| streamstats count by metric edgeId linkId interface\
| where count <=3\
\
| lookup templateAlarme_v2.csv metric OUTPUT occurences threshold operator severity message\
| eval anomaly = case(operator="=" AND value=threshold, "TRUE", \
                      operator=">" AND value>threshold, "TRUE", \
                      operator=">=" AND value>=threshold, "TRUE", \
                      operator="<" AND value<threshold, "TRUE", \
                      operator="<=" AND value<=threshold, "TRUE",\
                      operator="!=" AND value!=threshold, "TRUE",\
                      operator="<>" AND value!=threshold, "TRUE", \
                      true(), "FALSE")\
                      \
| stats count(eval(anomaly="TRUE")) as triggers\
        earliest(eval(if(anomaly="TRUE", _time, null()))) as alert_time\
        latest(eval(if(anomaly="TRUE", count, null()))) as last_alert_event\
        earliest(eval(if(anomaly="TRUE", value, null()))) as value\
        values(occurences) as occurences\
        latest(description) as solucao\
        values(message) as message\
        values(threshold) as threshold\
        values(severity) as severity\
        values(orig_index) as index\
        by metric edgeId linkId interface\
\
| where isnotnull(alert_time) AND triggers>=occurences AND last_alert_event <=2 \
\
| eval message=replace(message,"<interface>", interface), \
       message=replace(message,"<threshold>", threshold), \
       message=replace(message,"<edge>", edgeId),\
       message=replace(message,"<value>", value)\
| lookup severityMapping.csv id as severity OUTPUT\
       \
| fields metric alert_time edgeId linkId solucao message impact priority urgency interface update severity index\
| stats values(*) as * by metric edgeId linkId interface solucao\
\
| eval update = now(),\
       host = solucao,\
       extras = "{"\
\
| foreach edgeId,linkId,interface [\
    | eval extras = extras."\"<<FIELD>>\": \"".'<<FIELD>>'."\", "\
]\
| rex mode=sed field=extras "s/, $/}/g"\
| fields - edgeId,linkId,interface\
\
| rename solucao as Solucao severity as thresholdSeverityCode alert_time as dataAbertura\
| lookup Equipamentos Solucao output Estado Cidade ClienteId Cliente TipoNegocio TipoServico Servico Solucao Location PrimeId Description

[JOB - ABERTURA ALERTA NO ALERT MANAGER TESTE]
disabled = 1

[expurgo_encerrados]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 0 1 * *
description = expurgo incidents encerrados
display.general.timeRangePicker.show = 0
enableSched = 1
search = | inputlookup incidents\
| where status = "closed" OR status = "cancelled"\
| search NOT(\
    [| search index=alert_manager\
    | table incident_id\
    | format])\
| eval marker = `environment` ```->qdo fizer deploy mudar p/ PROD o conteudo dessa macro em prod...```\
| collect index=alert_manager\
| stats count as controle\
| eval controle=strftime(now(), "%B")\
| eval lookup = "incidents"\
| map search="| inputlookup $lookup$ | outputlookup $lookup$-Backup-$controle$.csv"\
| where 1=0\
| stats count as lookup\
| eval lookup = "Parameters"\
| map search="| inputlookup $lookup$ | eval value=\"True\" | outputlookup $lookup$"\
| where 1=0\
| append\
    [| inputlookup incidents ]\
| where status != "closed" AND status != "cancelled"\
| outputlookup incidents\
| where 1=0\
| stats count as lookup\
| eval lookup = "Parameters"\
| map search="| inputlookup $lookup$ | eval value=\"False\" | outputlookup $lookup$"

[coleta siebel]
action.email.show_password = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = */5 * * * *
description = coleta os dados retornados do siebel cada 30min
dispatch.earliest_time = -30m@m
dispatch.latest_time = @m
enableSched = 1
search = index="bdi_siebel" sourcetype="tsv_Siebel"\
| fields _time Identificador_TT_Cliente Descricao Responsavel Data_Abertura Solucao_Id Razao_Social Prime_Id\
| stats latest(*) as * by Identificador_TT_Cliente\
\
| join Identificador_TT_Cliente [\
    | inputlookup incidents where status IN ("new", "assigned")\
    | eval incident_id_bkp = incident_id \
    | rename incident_id_bkp as Identificador_TT_Cliente _key as key\
]\
\
| eval siebel = "{"\
| foreach Identificador_TT_Cliente,Descricao,Responsavel,Data_Abertura,Solucao_Id,Razao_Social,Prime_Id [\
    | eval siebel = siebel."\"<<FIELD>>\": \"".if(isnull('<<FIELD>>'), "", '<<FIELD>>')."\", "\
]\
| rex mode=sed field=siebel "s/, $/}/g"\
| fields - Identificador_TT_Cliente,Descricao,Responsavel,Data_Abertura,Solucao_Id,Razao_Social,Prime_Id\
\
| outputlookup append=true key_field=key incidents
